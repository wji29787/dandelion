define(["./when-b43ff45e","./Check-d404a0fe","./Math-336da716","./Cartesian3-2b5b9afe","./Cartesian2-577f67dc","./Transforms-18f02e2b","./RuntimeError-bf10f3d5","./WebGLConstants-56de22c0","./ComponentDatatype-8956ad9a","./GeometryAttribute-5eb995bc","./JulianDate-53cdb307","./RequestType-beb1291d","./GeometryAttributes-fbf888b4","./AttributeCompression-c335d1ea","./GeometryPipeline-282a4062","./EncodedCartesian3-f0c89625","./IndexDatatype-c5295474","./IntersectionTests-8ff35218","./Plane-5b30f0ff","./VertexFormat-89c0971b","./arrayRemoveDuplicates-a7dee4b8","./BoundingRectangle-a11f7177","./EllipsoidTangentPlane-51ba1d6b","./EllipsoidRhumbLine-b4761ded","./PolygonPipeline-6cd12a44","./PolylineVolumeGeometryLibrary-8765c50e","./EllipsoidGeodesic-47c65dee","./PolylinePipeline-76ef9442"],function(g,e,r,y,f,R,t,i,A,D,n,a,I,o,O,l,M,s,d,m,p,u,c,h,S,b,v,E){"use strict";var P={};function B(e,t){g.defined(P[e])||(P[e]=!0,console.warn(g.defaultValue(t,e)))}function _(e){var t=(e=g.defaultValue(e,g.defaultValue.EMPTY_OBJECT)).polylinePositions,i=e.shapePositions;this._positions=t,this._shape=i,this._ellipsoid=f.Ellipsoid.clone(g.defaultValue(e.ellipsoid,f.Ellipsoid.WGS84)),this._cornerType=g.defaultValue(e.cornerType,b.CornerType.ROUNDED),this._vertexFormat=m.VertexFormat.clone(g.defaultValue(e.vertexFormat,m.VertexFormat.DEFAULT)),this._granularity=g.defaultValue(e.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",this.isOffset=g.defaultValue(e.isOffset,!1),this.isMultiImage=g.defaultValue(e.isMultiImage,!1);var n=1+t.length*y.Cartesian3.packedLength;n+=1+i.length*f.Cartesian2.packedLength,this.packedLength=n+f.Ellipsoid.packedLength+m.VertexFormat.packedLength+2+1+1}B.geometryOutlines="Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.",B.geometryZIndex="Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored",B.geometryHeightReference="Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored",B.geometryExtrudedHeightReference="Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored",_.pack=function(e,t,i){var n;i=g.defaultValue(i,0);var r=e._positions,a=r.length;for(t[i++]=a,n=0;n<a;++n,i+=y.Cartesian3.packedLength)y.Cartesian3.pack(r[n],t,i);var o=e._shape,a=o.length;for(t[i++]=a,n=0;n<a;++n,i+=f.Cartesian2.packedLength)f.Cartesian2.pack(o[n],t,i);return f.Ellipsoid.pack(e._ellipsoid,t,i),i+=f.Ellipsoid.packedLength,m.VertexFormat.pack(e._vertexFormat,t,i),i+=m.VertexFormat.packedLength,t[i++]=e._cornerType,t[i++]=e._granularity,t[i++]=e.isOffset?1:0,t[i]=e.isMultiImage?1:0,t};var x=f.Ellipsoid.clone(f.Ellipsoid.UNIT_SPHERE),k=new m.VertexFormat,V={polylinePositions:void 0,shapePositions:void 0,ellipsoid:x,vertexFormat:k,cornerType:void 0,granularity:void 0,isOffset:void 0,isMultiImage:void 0};_.unpack=function(e,t,i){t=g.defaultValue(t,0);for(var n=e[t++],r=new Array(n),a=0;a<n;++a,t+=y.Cartesian3.packedLength)r[a]=y.Cartesian3.unpack(e,t);n=e[t++];var o=new Array(n);for(a=0;a<n;++a,t+=f.Cartesian2.packedLength)o[a]=f.Cartesian2.unpack(e,t);var l=f.Ellipsoid.unpack(e,t,x);t+=f.Ellipsoid.packedLength;var s=m.VertexFormat.unpack(e,t,k);t+=m.VertexFormat.packedLength;var d=e[t++],p=e[t],u=e[++t],c=e[++t];return g.defined(i)?(i._positions=r,i._shape=o,i._ellipsoid=f.Ellipsoid.clone(l,i._ellipsoid),i._vertexFormat=m.VertexFormat.clone(s,i._vertexFormat),i._cornerType=d,i._granularity=p,i.isOffset=u,i.isMultiImage=c,i):(V.polylinePositions=r,V.shapePositions=o,V.cornerType=d,V.granularity=p,V.isOffset=u,V.isMultiImage=c,new _(V))};var C=new u.BoundingRectangle;return _.createGeometry=function(e){var t=e._positions,i=p.arrayRemoveDuplicates(t,y.Cartesian3.equalsEpsilon),n=e._shape,n=b.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(n);if(!(i.length<2||n.length<3)){S.PolygonPipeline.computeWindingOrder2D(n)===S.WindingOrder.CLOCKWISE&&n.reverse();var r=u.BoundingRectangle.fromPoints(n,C);return function(e,t,i,n,r){var a=new I.GeometryAttributes;n.position&&(a.position=new D.GeometryAttribute({componentDatatype:A.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));for(var o,l,s,d,p,u=t.length,c=e.length/3,g=(c-2*u)/(2*u),y=S.PolygonPipeline.triangulate(t),f=(g-1)*u*6+2*y.length,m=M.IndexDatatype.createTypedArray(c,f),h=2*u,b=0,v=0;v<g-1;v++){for(o=0;o<u-1;o++)p=(l=2*o+v*u*2)+h,d=(s=l+1)+h,m[b++]=s,m[b++]=l,m[b++]=d,m[b++]=d,m[b++]=l,m[b++]=p;d=(s=(l=2*u-2+v*u*2)+1)+h,p=l+h,m[b++]=s,m[b++]=l,m[b++]=d,m[b++]=d,m[b++]=l,m[b++]=p}if(n.st||n.tangent||n.bitangent){var E,P,_=new Float32Array(2*c),x=1/(g-1),k=1/i.height,V=i.height/2,C=0;if(r)for(v=0;v<g;v++){for(E=v*x,P=k*(t[0].y+V),_[C++]=E+10,_[C++]=.99,o=1;o<u;o++)_[C++]=E+10*(o+1),_[C++]=.01,_[C++]=E+10*(o+1),_[C++]=.99;P=k*(t[0].y+V),_[C++]=E+10*o,_[C++]=.01}else for(v=0;v<g;v++){for(E=v*x,P=k*(t[0].y+V),_[C++]=E,_[C++]=P,o=1;o<u;o++)P=k*(t[o].y+V),_[C++]=E,_[C++]=P,_[C++]=E,_[C++]=P;P=k*(t[0].y+V),_[C++]=E,_[C++]=P}for(o=0;o<u;o++)E=0,P=k*(t[o].y+V),_[C++]=E,_[C++]=P;for(o=0;o<u;o++)E=(g-1)*x,P=k*(t[o].y+V),_[C++]=E,_[C++]=P;a.st=new D.GeometryAttribute({componentDatatype:A.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(_)})}var L=c-2*u;for(v=0;v<y.length;v+=3){var w=y[v]+L,F=y[v+1]+L,T=y[v+2]+L;m[b++]=w,m[b++]=F,m[b++]=T,m[b++]=T+u,m[b++]=F+u,m[b++]=w+u}var G=new D.Geometry({attributes:a,indices:m,boundingSphere:R.BoundingSphere.fromVertices(e),primitiveType:D.PrimitiveType.TRIANGLES});if(n.normal&&(G=O.GeometryPipeline.computeNormal(G)),n.tangent||n.bitangent){try{G=O.GeometryPipeline.computeTangentAndBitangent(G)}catch(e){B("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}n.tangent||(G.attributes.tangent=void 0),n.bitangent||(G.attributes.bitangent=void 0),n.st||(G.attributes.st=void 0)}return G}(b.PolylineVolumeGeometryLibrary.computePositions(i,n,r,e,!0,e.isOffset),n,r,e._vertexFormat,e.isMultiImage)}},function(e,t){return g.defined(t)&&(e=_.unpack(e,t)),e._ellipsoid=f.Ellipsoid.clone(e._ellipsoid),_.createGeometry(e)}});
